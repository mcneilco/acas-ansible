- name: Install Git
  package:
    name: "git"
    state: "present"
  tags:
    - "install git"
- name: Install gcc
  package:
    name: "gcc"
    state: "present"
  tags:
    - "install gcc"
- name: Install python-devel
  package:
    name: "python-devel"
    state: "present"
  tags:
    - "install-python-devel"
- name: Ensure .ssh directory exists
  file:
    path: /home/acas/.ssh
    state: directory
    mode: 0700
    owner: "{{ run_user }}"
    group: "{{ run_group }}"
- name: Ensure GitHub deploy key is present on the server
  copy:
    content: "{{ acas_custom_deploykey }}"
    dest: /home/acas/.ssh/acas_custom_deploykey
    mode: 0600
    owner: "{{ run_user }}"
    group: "{{ run_group }}"
  tags:
    - deploykey
- name: Set permissions on {{ acas_install_directory }}
  file:
    path: "{{ acas_install_directory }}/{{ item }}"
    group: "{{ run_group }}"
    owner: "{{ run_user }}"
    recurse: yes
  with_items:
    - acas_custom
- name: Add a postgres group with same gid as docker postgres
  group:
    name: postgres
    state: present
    gid: 499
- name: Add a postgres user with same uid/gid as docker postgres
  user:
    name: postgres
    group: postgres
    comment: postgres
    uid: 499
- name: Set permissions on {{ acas_install_directory }}/dbstore
  file:
    path: "{{ acas_install_directory }}/dbstore"
    group: postgres
    owner: postgres
    recurse: yes
- name: Set permissions on {{ acas_install_directory }}/filestore
  file:
    path: "{{ acas_install_directory }}/filestore"
    state: directory
    group: centos
    owner: centos
    recurse: yes
- name: Set permissions on {{ acas_install_directory }}/cache
  file:
    path: "{{ acas_install_directory }}/cache"
    state: directory
    group: centos
    owner: centos
    mode: 0777
    recurse: yes
- name: Clone {{ acas_custom_gitrepo }} to {{ acas_install_directory }}/acas_custom
  git:
    repo: "{{ acas_custom_gitrepo }}"
    dest: "{{ acas_install_directory }}/acas_custom"
    version: "{{ acas_custom_gitrevision }}"
    accept_hostkey: yes
    key_file: /home/acas/.ssh/acas_custom_deploykey
    force: yes
    update: yes
  become_user: acas
- name: Check which template files exist
  stat:
    path: "{{ acas_install_directory }}/acas_custom/{{item}}"
  with_items:
    - conf/zzz-config.properties
    - conf/applicationContext-security.xml
    - docker-compose.yml
    - modules/CmpdReg/src/client/custom/configuration.json
  register: template_assets
  tags: 
    - template
- debug:
    msg: 'file name {{item.item}} exists'
  with_items: "{{ template_assets.results }}"
  when: item.stat.exists
  tags: 
    - template
- name: Run template on acas_custom files
  run_once: true
  fetch:
    src: "{{ acas_install_directory }}/acas_custom/{{ item.item }}"
    dest: /tmp/{{item.item}}
    flat: yes
    fail_on_missing: yes
  with_items: "{{ template_assets.results }}"
  when: item.stat.exists
  tags: 
    - template
- name: Set variables in templates
  template :
    src   : /tmp/{{item.item}}
    dest  : "{{ acas_install_directory }}/acas_custom/{{item.item}}"
    owner: "{{ run_user }}"
    group: "{{ run_group }}"
  with_items: "{{ template_assets.results }}"
  when: item.stat.exists
  tags: 
    - template
- name: Set variables in templates
  template :
    src   : /tmp/{{item}}
    dest  : "{{ acas_install_directory }}/acas_custom/{{item}}"
    owner: "{{ run_user }}"
    group: "{{ run_group }}"
  with_items:
    - conf/applicationContext-security.xml
  when: acas_authstrategy == "ldap"
  tags: 
    - template
- name: Remove application context if acas auth
  lineinfile:
    path: "{{ acas_install_directory }}/acas_custom/docker-compose.yml"
    state: absent
    regexp: 'applicationContext-security.xml'
  when: acas_authstrategy != "ldap"
  tags: 
    - template
- name: Get ACAS dot files git repo
  git:
    repo: 'https://github.com/mcneilco/acas-dotfiles.git'
    dest: '/etc/profile.d/acas-dotfiles'
- name: Install dot files
  command: cp /etc/profile.d/acas-dotfiles/system/acas.sh /etc/profile.d
- name: Docker login
  command: docker login -u {{ acas_docker_login_user }} -p {{ acas_docker_login_password }}
  become: yes
  become_user: acas
- name: Make dbstore folder
  file:
    path: "{{ acas_install_directory }}/dbstore"
    state: directory
    group: postgres
    owner: postgres
- name: Install docker python package
  pip:
    name: [docker, docker-compose]
    extra_args: --user
    state: present
  become: yes
  become_user: acas
  tags: 
    - start-acas
    - docker-python
- name: Get docker-compose project name
  shell: |
     if [ -f .env ]; then 
       . .env; 
     fi;
     folder=$(basename $(pwd));
     project=${COMPOSE_PROJECT_NAME:-$folder};
     project=$(echo "${project//[^A-Za-z0-9_ ]/}" | tr [:upper:] [:lower:]);
     echo $project;
  args:
    chdir: "{{ acas_install_directory }}/acas_custom"
    executable: /bin/bash
  register: compose_project
  tags:
    - compose-project
    - pg-hba-conf
- name: Docker compose project
  debug:
    var: compose_project.stdout
  tags:
    - compose-project
    - pg-hba-conf
- name: Get info on old docker network
  docker_network_info:
    name: "{{ compose_project.stdout }}_default"
  register: docker_old_network_info
  become: yes
  become_user: acas
  tags:
    - pg-hba-conf
- name: Old docker network info
  debug:
    var: docker_old_network_info.network
  when: docker_old_network_info.exists
  tags:
    - pg-hba-conf
- name: Run docker compose down (remove volumes yes, this won't remove the database or filestore)
  docker_compose:
    project_src: "{{ acas_install_directory }}/acas_custom"
    state: absent
    remove_volumes: yes
  become: yes
  become_user: acas
  tags: 
    - start-acas
- name: Get docker-compose config output
  command: "{{ vars.docker_compose_path}} config"
  args:
    chdir: "{{ acas_install_directory }}/acas_custom"
  register: docker_compose_config
- name: Parse docker compose config output into variable
  set_fact:
    docker_compose_info: "{{ docker_compose_config.stdout | from_yaml }}"
# - name: Print some debug information 
#   vars: 
#     msg: |
#         Module Variables ("vars"):
#         --------------------------------
#         {{ vars | to_nice_json }} 

#         Environment Variables ("environment"):
#         --------------------------------
#         {{ environment | to_nice_json }} 

#         GROUP NAMES Variables ("group_names"):
#         --------------------------------
#         {{ group_names | to_nice_json }}

#         GROUPS Variables ("groups"):
#         --------------------------------
#         {{ groups | to_nice_json }}

#         HOST Variables ("hostvars"):
#         --------------------------------
#         {{ hostvars | to_nice_json }} 

#   debug: 
#     msg: "{{ msg.split('\n') }}"       
#   tags: debug_info
- name: Docker info
  debug:
    var: docker_compose_info
- name: Add update certs script
  template:
    src: templates/updatecerts.sh
    dest: "{{ acas_install_directory }}/updatecerts.sh"
  when: docker_compose_info.services.certs is defined
  tags:
    - update-certs
- name : Remove - Check for updated certs nightly cron using certs update script 
  cron :
    name  : "check and update certs"
    user: root
    state : absent
- name: Add - Check for updated certs nightly cron using certs update script 
  cron:
    name: "check and update certs"
    minute: "0"
    hour: "0"
    user: root
    job: "/bin/bash {{ acas_install_directory }}/updatecerts.sh > /dev/null 2>&1 || true"
  when: docker_compose_info.services.certs is defined
  tags:
    - update-certs
- name: Execute the certs update script (adds postgres certs)
  command: "/bin/bash {{ acas_install_directory }}/updatecerts.sh"
  become: yes
  when: docker_compose_info.services.certs is defined
  tags:
    - update-certs
- name: Run docker compose up
  docker_compose:
    project_src: "{{ acas_install_directory }}/acas_custom"
    state: present
    pull: yes
    # pull: yes #ansible bug currently breaking pull
  become: yes
  become_user: acas
  tags: 
    - start-acas
- name: Docker prune everything (including non-dangling images)
  docker_prune:
    images: yes
    images_filters:
      dangling: false
    networks: yes
    volumes: yes
    builder_cache: yes
  become: yes
  become_user: acas
- name: Pause for 2 minutes
  pause:
    minutes: 2
  tags:
    - restore-acas
  when: restore is defined
- name: Restart services
  docker_compose:
    project_src: "{{ acas_install_directory }}/acas_custom"
    state: present
    services:
      - acas
      - rservices
    restarted: yes  
  become: yes
  become_user: acas
  tags:
    - restore-acas
  when: restore is defined
- name: Run database restore with {{ restore }}
  shell: |
    /usr/local/bin/docker-compose exec backup ./backup.sh restore {{ restore }}
  args:
    chdir: "{{ acas_install_directory }}/acas_custom"
  become: yes
  become_user: acas
  when: restore is defined
  register: restore_result
  tags:
    - restore-acas
- debug: msg="{{ restore_result.stdout.split('\n')[:-1] }}"
  when: restore is defined
  tags:
    - restore-acas
- name: Pause for 2 minutes
  pause:
    minutes: 2
  when: restore is not defined
- name: Restart services
  docker_compose:
    project_src: "{{ acas_install_directory }}/acas_custom"
    state: present
    services:
      - acas
      - rservices
      - tomcat
      - nginx
    restarted: yes  
  become: yes
  become_user: acas
  tags:
    - start-acas
    - restore-acas
  tags:
    - update-certs
- name: Configure postgres ssl users
  postgresql_pg_hba:
    dest: "{{ acas_install_directory }}/dbstore/pg_hba.conf"
    contype: hostssl
    users: "{{ postgres_ssl_remote_users|join(', ') }}"
    databases: all
    source: 0.0.0.0/0
  when: docker_compose_info.services.certs is defined
  tags:
    - postgres-ssl-users
    - pg-hba-conf
- name: Get info on docker network
  docker_network_info:
    name: "{{ compose_project.stdout }}_default"
  register: docker_network_info
  become: yes
  become_user: acas
  tags:
    - pg-hba-conf
- name: Print information about docker network
  debug:
    var: docker_network_info.network
  when: docker_network_info.exists
  tags:
    - pg-hba-conf
- name: Revoke old docker network from non ssl connections to postgres database
  postgresql_pg_hba:
    dest: "{{ acas_install_directory }}/dbstore/pg_hba.conf"
    contype: host
    users: all
    databases: all
    source: "{{ docker_old_network_info.network.IPAM.Config[0].Subnet }}"
    state: absent
  when: docker_old_network_info.exists
  tags:
    - pg-hba-conf
- name: Configure postgres non ssl connections (within docker network)
  postgresql_pg_hba:
    dest: "{{ acas_install_directory }}/dbstore/pg_hba.conf"
    contype: host
    users: all
    databases: all
    source: "{{ docker_network_info.network.IPAM.Config[0].Subnet }}"
  tags:
    - pg-hba-conf
- name: Restart services
  docker_compose:
    project_src: "{{ acas_install_directory }}/acas_custom"
    state: present
    restarted: yes  
  become: yes
  become_user: acas
  tags:
    - pg-hba-conf
- name: Add api views installation script
  template:
    src: templates/copy_api_views_to_db_container.sh
    dest: "{{ acas_install_directory }}/acas_custom/copy_api_views_to_db_container.sh"
    owner: "{{ run_user }}"
    group: "{{ run_group }}"
    mode: 0777
  when: install_api_views
  tags:
    - api-views
- name: Add api views sql script
  template:
    src: templates/api_views.sql
    dest: "{{ acas_install_directory }}/acas_custom/api_views.sql"
    owner: "{{ run_user }}"
    group: "{{ run_group }}"
  when: install_api_views
  tags:
    - api-views
- name: Execute the api views installation script
  command: "{{ acas_install_directory }}/acas_custom/copy_api_views_to_db_container.sh"
  args:
    chdir: "{{ acas_install_directory }}/acas_custom"
  become: yes
  become_user: acas
  when: install_api_views
  tags:
    - api-views
- name: Add cron for api_analysis_group_results 
  cron:
    name: "update materialized views api_analysis_group_results"
    minute: "*/1"
    hour: "*"
    user: acas
    job: "cd /vol/acas/acas_custom && /usr/local/bin/docker-compose exec -T db psql -U readonly acas -c \"REFRESH MATERIALIZED VIEW CONCURRENTLY api_analysis_group_results_mv; REFRESH MATERIALIZED VIEW CONCURRENTLY api_dose_response_mv;\"  > /dev/null 2>&1 || true"
  when: install_api_views
  tags:
    - api-views
    - api-views-cron
- name: Add cron for api_salt_form 
  cron:
    name: "update materialized views api_salt_form"
    minute: "*/5"
    hour: "*"
    user: acas
    job: "cd /vol/acas/acas_custom && /usr/local/bin/docker-compose exec -T db psql -U readonly acas -c \"REFRESH MATERIALIZED VIEW CONCURRENTLY api_salt_form_corp_name; REFRESH MATERIALIZED VIEW CONCURRENTLY api_salt_form_mv;REFRESH MATERIALIZED VIEW CONCURRENTLY api_salt_form_assoc_mv;\"   > /dev/null 2>&1 || true"
  when: install_api_views
  tags:
    - api-views
    - api-views-cron
- name: Add cron for api_aliquot_inventory 
  cron:
    name: "update materialized views api_aliquot_inventory"
    minute: "*/5"
    hour: "*"
    user: acas
    job: "cd /vol/acas/acas_custom && /usr/local/bin/docker-compose exec -T db psql -U readonly acas -c psql -c \"REFRESH MATERIALIZED VIEW CONCURRENTLY api_aliquot_inventory_mv;\"   > /dev/null 2>&1 || true"
  when: install_api_views
  tags:
    - api-views
    - api-views-cron
