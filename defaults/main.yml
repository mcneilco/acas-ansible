---
# defaults file for ansible-acas-docker
# Stack name
env: test
company: companyname
stack_name: "{{ company }}-{{ env }}"
acas_fqdn: "{{ company }}-{{ env }}.onacaslims.com"
livedesign_fqdn: "{{ company }}-{{ env }}.onschrodinger.com"
livedesign_private_ip: 10.100.54.11
acas_authstrategy: database

# email for password resets coming from acas when auth strategy is set to acas
email_host: email-smtp.{{ aws_region }}.amazonaws.com
email_port: 587
email_auth: true
email_ssl: true
email_tls: true
email_user: 
email_password:
email_from: "{{ company }} ACAS {{ env }} <{{ stack_name }}@{{ acas_fqdn }}>"

run_backups: false
# Uncomment the next line and run ansible when you want to start test from a backup of prod
# restore: "latest hourly s3://{{ company }}.onacaslims.com/{{ company }}-prod"

# User account used to ssh the hosts
remote_user: ubuntu

# non-sudo user to be created for running process
action_user: docker

# Edition can be one of: 'ce' (Community Edition) or 'ee' (Enterprise Edition).
docker_edition: 'ce'
docker_package: "docker-{{ docker_edition }}"
docker_package_state: present

# Service options.
docker_service_state: started
docker_service_enabled: true
docker_restart_handler_state: restarted

# Docker Compose options.
docker_install_compose: true
docker_compose_version: "1.24.1"
docker_compose_path: /usr/local/bin/docker-compose

# Used only for Debian/Ubuntu. Switch 'stable' to 'edge' if needed.
docker_apt_release_channel: stable
docker_apt_arch: amd64
docker_apt_repository: "deb [arch={{ docker_apt_arch }}] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
docker_apt_ignore_key_error: true

# Used only for RedHat/CentOS/Fedora.
docker_yum_repo_url: https://download.docker.com/linux/{{ (ansible_distribution == "Fedora") | ternary("fedora","centos") }}/docker-{{ docker_edition }}.repo
docker_yum_repo_enable_edge: 0
docker_yum_repo_enable_test: 0

# Run user
run_user: acas
run_group: docker

# A list of users who will be added to the docker group.
docker_users: ['acas']

# Max Docker log file size
docker_log_max_size: 20m

# Local Persist volume plugin options.
docker_install_local_persist: true
local_persist_restart_handler_state: restarted

# Docker login user
acas_docker_login_user: mcneilcodeploy
acas_docker_login_password: 

# ACAS Install directory
acas_install_directory: /vol/acas

# ACAS Install directory
acas_custom_gitrepo: git@bitbucket.org:{{ company }}/acas_custom.git
acas_custom_gitrevision: HEAD

# Key file for ansible operations
ansible_ssh_private_key_file: ~/.ssh/acas-{{ company }}.pem

# Install api views and api views cron
install_api_views: true

# Postgres command
db_command: ["postgres", "-c", "log_connections=on", "-c", "log_disconnections=on", "-c", "ssl=on", "-c", "ssl_cert_file=/certs/server.crt", "-c", "ssl_key_file=/certs/server.key"]
#use to bottstrap then redeploye with above
#db_command: ["postgres", "-c", "log_connections=on", "-c", "log_disconnections=on"]

# Configure Postgres SSL remote users
# Only users on this list will be able to connect to the database remotely
postgres_ssl_remote_users: ["readonly", "acas"]

# ACAS Server admins which will get sudo access via the acasadmins servergroup
acas_server_admins: []
